1-1=Using Collections and compareTo, sort the car list alphabetically by model
        Collections.sort(cars, (c1, c2) -> c1.getModel().compareTo(c2.getModel()));
1-2=Using Collections and compareTo, sort the car list alphabetically by brand
        Collections.sort(cars, (c1, c2) -> c1.getBrand().compareTo(c2.getBrand()));
2-1=Using Collections and compareTo, sort the car list by id in descending order
        Collections.sort(cars, (c1, c2) -> c2.getId().compareTo(c1.getId()));
2-2=Using Collections and compareTo, sort the car list by price in descending order
        Collections.sort(cars, (c1, c2) -> c2.getPrice().compareTo(c1.getPrice()));
3-1=Using Collections and compareTo, sort the car list by brand then by model
        Collections.sort(cars, (c1, c2) -> c2.getPrice().compareTo(c1.getPrice()));
            if(c1.getBrand().equalsIgnoreCase(c2.getBrand())){
                return c1.getModel().compareTo(c2.getModel());
            }else{
                return c1.getBrand().compareTo(c2.getBrand());
            }
        });
3-2=Using Collections and compareTo, sort the car list by horsepower then by price 
        Collections.sort(cars, (c1, c2) -> {
            if(c1.getHorsepower() == c2.getHorsepower()){
                return c1.getPrice().compareTo(c1.getPrice());
            }else{
                return c1.getHorsepower().compareTo(c2.getHorsepower());
            }
        });
4-1=Using Collections and Comparator, sort the car list by brand then price
        Collections.sort(cars, Comparator.comparing(Car::getBrand).thenComparing(Car::getPrice));
4-2=Using Collections and Comparator, sort the car list by brand the price descending
        Collections.sort(cars, Comparator.comparing(Car::getBrand).thenComparing(Car::getPrice).reversed());
