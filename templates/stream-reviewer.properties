1-1=Using stream and Collectors, create a List<String> of all models of cars
1-2=Using stream and Collectors, create a List<Integer> of all ids of cars
2-1=Using stream, filter, and Collectors, create a List<Integer> of all even horsepowers
2-2=Using stream, filter, and Collectors, create a List<Integer> of all odd horsepowers
3-1=Using stream, limit, distinct, and Collectors, create a List<String> of distinct brands of cars but limit the size of List into 3 
3-2=Using stream, limit, distinct, and Collectors, create a List<Double> of distinct prices of cars but limit the size of List into 4 
4-1=Using stream, limit, distinct, sort, and Collectors, create a List<String> of distinct brands sorted alphabetically and limit the size into 5
4-2=Using stream, limit, distinct, sort, and Collectors, create a List<Integer> of distinct prices sorted from highest to lowest and limit the size into 3 
5-1=Using stream and allMatch, verify if all the cars' horsepower are above 500
5-2=Using stream and allMatch, verify if all the cars' prices are above 2000000.00 
6-1=Using stream and anyMatch, verify if there is a car with a brand of Czinger
6-2=Using stream and anyMatch, verify if there is a Pagani Zonda car from the list 
7-1=Using stream and noneMatch, verify if there are no 815 horspower from the car list 
7-2=Using stream and noneMatch, verify if there are no cars with V8 engine
8-1=Using stream and skip, create a List<String> of models alphabetically but skip the first 3
8-2=Using stream and skip, create a List<Double> of prices from highest to lowest but skip the first 2 
9-1=Using stream, sort, and Comparator sort the list of Cars by horsepower from lowest to highest
9-2=Using stream, sort, and Comparator, sort the list of Cars by horspower from highest to lowest
10-1=Using stream and findAny, return any Car with a Rolls-Royce brand
10-2=Using stream and findAny, return any Car with a horsepower greater than 500 but less then 1000
11-1=Using stream and map, create a List<Integer> where the values will be the number of characters of the car model
11-2=Using stream and map, create a List<Integer> where the values will be the number of engies
12-1=Using stream and reduce, return the sum of all prices of all cars
12-2=Using stream, distinct, and reduce, create a string which has all the distinct car brands 
13-1=Using stream, reduce, and Double.max, print the highest price of cars
13-2=Using stream, reduce, and Double.min, print the lowest horsepower of cars
14-1=Using stream and sum, compute the sum of all horsepowers of cars
14-2=Using stream and min, print the minimum car price
15-1=Using IntStream and range, print all the odd numbers from 1 to 10
15-2=Using IntStream and range, pring all the even numbers from 1 to 10
16-1=Using Stream.of, create a Stream<Integer> where values are 1, 2, 3, 4
16-2=Using Stream.of, create a Stream<Double> where values are 2.0, 4.0, 6.0, 8.0
17-1=Using Stream.iterate, create a Stream<Integer> with multiples of 5
17-2=Using Stream.iterate, create a Stream<Double> with multiples of 2.5 
