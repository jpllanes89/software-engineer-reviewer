1-1=Create an appendTitle UnaryOperator that will add "TITLE: " to a string. For each title of book, apply the UnaryOperator and print the output: TITLE: <title>
    UnaryOperator<String> appendTitle = s -> "TITLE: " + s;
    books.stream().forEach(b -> System.out.println(appendTitle.apply(b.getTitle())));
1-2=Create an appendCategory UnaryOperator that will add "CATEGORY: " to a string. For each category of book, apply the UnaryOperator and print the output: CATEGORY: <category>
    UnaryOperator<String> appendCategory = s -> "CATEGORY: " + s;
    books.stream().forEach(b -> System.out.println(appendCategory.apply(b.getCategory())));
1-3=Create an appendAuthor UnaryOperator that will add "AUTHOR: " to a string. For each author of book, apply the UnaryOperator and print the output: AUTHOR: <author>
    UnaryOperator<String> appendAuthor = s -> "AUTHOR: " + s;
    books.stream().map(Book::getAuthors).collect(Collectors.toList()).stream().flatMap(Collection::stream).forEach(a -> System.out.println(appendAuthor.apply(a)));
2-1=Create a createHeaderByTitleAndGenre BinaryOperator that will take the title and genre as parameter and will return "<title>: <genre>"
    BinaryOperator<String> createHeaderByTitleAndGenre = (t, g) -> t + ": " + g;
    books.stream().forEach(b -> System.out.println(createHeaderByTitleAndGenre.apply(b.getTitle(), b.getGenre())));
2-2=Create a createHeaderByTitleAndCategory BinaryOperator that will take the title and category as parameter and will return "<title>: <category>" 
    BinaryOperator<String> createHeaderByTitleAndCategory = (t, c) -> t + ": " + c;
    books.stream().forEach(b -> System.out.println(createHeaderByTitleAndCategory.apply(b.getTitle(), b.getCategory())));
3-1=Create a toPhpPrice Function that will take price as parameter and will return a String "Php <price>"
    Function<Double, String> toPhpPrice = p -> "Php " + String.valueOf(p);
    books.stream().forEach(b -> System.out.println(toPhpPrice.apply(b.getPrice())));
3-2=Create a toNumberOfPages Function that will take numberOfpages parameter an will return a String "No. of Pages: <numberOfPages>"
    Function<Integer, String> toNumberOfPages = n -> "No. of Pages: " + String.valueOf(n); 
    books.stream().forEach(b -> System.out.println(toNumberOfPages.apply(b.getNumberOfPages())));
4-1=Create a createHeaderByTitleAndPages that will take title and numberOfPages as parameters and will return a String "<title>: <numberOfPages>"
    BiFunction<String, Integer, String> createHeaderByTitleAndPages = (t, n) -> t + ": " + n; 
    books.stream().forEach(b -> System.out.println(createHeaderByTitleAndPages.apply(b.getTitle(), b.getNumberOfPages())));
4-2=Create a createHeaderByTitleAndPrice that will take title an price as parameters and will return a String "<title>: <price>"
    BiFunction<String, Double, String> createHeaderByTitleAndPrice = (t, p) -> t + ": " + p;
    books.stream().forEach(b -> System.out.println(createHeaderByTitleAndPrice.apply(b.getTitle(), b.getPrice())));
5-1=Create two UnaryOperators. The first will be an encapsulateTitle which accepts a title parameter and returns "[<title>]". The Second will be an createFormattedTitle which accepts the result of the UnaryOperator then returns "TITLE: [<title>]"
    UnaryOperator<String> encapsulateTitle = t -> "[" + t + "]";
    UnaryOperator<String> createFormattedTitle = t -> "TITLE: " + t;
    books.stream().forEach(b -> System.out.println(encapsulateTitle.andThen(createFormattedTitle).apply(b.getTitle())));
" + t + "=";
5-2=Create two UnaryOperators. The first will be an encapsulateTitle which accepts the result of the second UnaryOperator then returns "[TITLE: <title>]". The Second will be an createFormattedTitle which accepts a title parameter and returns "TITLE: <title>"
    UnaryOperator<String> encapsulateTitle2 = t -> "[" + t + "]";
    UnaryOperator<String> createFormattedTitle2 = t -> "TITLE: " + t;
    books.stream().forEach(b -> System.out.println(encapsulateTitle2.compose(createFormattedTitle2).apply(b.getTitle())));
" + t + "=";
6-1=Create a printTitle Consumer which accepts a title parameter and prints "Title=<title>"
    Consumer<String> printTitle = t -> System.out.println("Title=" + t);
    books.stream().forEach(b -> printTitle.accept(b.getTitle()));
6-2=Create a printCategory Consumer which accepts a category parameter and prints "Category=<category>"
    Consumer<String> printCategory = c -> System.out.println("Category=" + c);
    books.stream().forEach(b -> printCategory.accept(b.getCategory()));
6-3=Create a printAuthor Consumer which accepts a author parameter and prints "Author=<author>"
    Consumer<String> printAuthor = a -> System.out.println("Author=" + a);
    books.stream().map(Book::getAuthors).collect(Collectors.toList()).stream().flatMap(Collection::stream).collect(Collectors.toList()).forEach(a -> printAuthor.accept(a));
7-1=Create two Consumers. The first will be a printGenre which accepts a genre and prints "Genre=<genre>". The second will be a printFormattedGenre which accepts the result of the first genre and prints "[<genre>]" 
    Consumer<String> printGenre = g -> System.out.println("Genre=" + g);
    Consumer<String> printFormattedGenre = g -> System.out.println("[" + g + "]" );
    books.stream().forEach(b -> printGenre.andThen(printFormattedGenre).accept(b.getGenre()));
" + g + "=" );
8-1=Create a generateGreetings which return a String "Hello, I am a Supplier" and print it.
    Supplier<String> generateGreetings = () -> "Hello, I am a Supplier";
    System.out.println(generateGreetings.get()); 
8-2=Create a generateRandomPageNumber which returns an Integer <random-number> and print it.
    Random random = new Random();
    Supplier generateRandomPageNumber = () -> random.nextInt();
    System.out.println(generateRandomPageNumber.get());
9-1=Create an isEvenNumber which accepts an Integer and returns true if the number is even.
    IntPredicate isEvenNumber = n -> n % 2 == 0;
    System.out.println(isEvenNumber.test(2));
9-2=Create an isOddNumber which accepts an Integer and returns true if the number id odd.
    IntPredicate isOddNumber = n -> n % 2 != 0;
    System.out.println(isOddNumber.test(3));
10-1=Create an doesBookContainEvenNumberOfPages which accepts a Book and returns true if the number of pages is even.
    Predicate<Book> doesBookContainEvenNumberOfPages = b -> b.getNumberOfPages() % 2 == 0;
    books.stream().forEach(b -> System.out.println(String.format("book has even number of pages: %s", doesBookContainEvenNumberOfPages.test(b))));
10-1=Create an doesBookContainOddNumberOfPages which accepts a Book and returns true if the number of pages is odd.
    Predicate<Book> doesBookContainOddNumberOfPages = b -> b.getNumberOfPages() % 2 != 0;
    books.stream().forEach(b -> System.out.println(String.format("book has odd number of pages: %s", doesBookContainOddNumberOfPages.test(b))));
11-1=Create a hasTheSameCategory which accepts two books and returns true if both books has same category
    BiPredicate<Book, Book> hasTheSameCategory = (b1, b2) -> b1.getCategory().equalsIgnoreCase(b2.getCategory());
    System.out.println(String.format("%s and %s has the same category: %s", books.get(0).getTitle(), books.get(2).getTitle(), hasTheSameCategory.test(books.get(0), books.get(2))));


























