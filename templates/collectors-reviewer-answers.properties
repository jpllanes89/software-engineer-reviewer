1-1=Accumulate all book titles into a List<String> titleList
List<String> authorList = books.stream().map(Book::getTitle).collect(Collectors.toList());
1-2=Accumulate all book authors into a List<String> authorList
List<String> authorList = books.stream().map(Book::getAuthors).collect(Collectors.toList()).stream().flatMap(List::stream).collect(Collectors.toList());
2-1=Accumulate all book titles into a HashSet<String> titleSet
Set<String> titleSet = books.stream().map(Book::getTitle).collect(Collectors.toSet());
2-2=Accumulate all book authors into a TreeSet<String> authorSet
3-1=Convert titles into a String titles and concatenate them, separated by comma
3-2=Convert authors into a String authors and concatenate them, separated by comma
String authors = books.stream().map(Book::getAuthors).collect(Collectors.toList()).stream().flatMap(List::stream).collect(Collectors.joining(", "));
4-1=Compute the sum of all pages of all the books
Integer sum = books.stream().collect(Collectors.summingInt(Book::getNumberOfPages));
4-2=Compute the average price of all the books
5-1=Group books by category into a Map<String, List<Book>>
5-2=Group books by number of review stars into a Map<Integer, List<Book>>
5-3=Group books by genre into a Map<String, List<Book>>. Note that one book has no genre. For books without genre, make "No Genre" as the key
Map<String, List<Book>> byGenre = books.stream().collect(Collectors.groupingBy(b -> b.getGenre() != null ? b.getGenre() : "No Genre"));
6-1=Group books by category and sum the number of pages for each category into a Map<String, Integer>
6-2=Group books by genre and sum the number of pages for each category into a Map<String, Integer>. Note that one book has no genre. For books without genre, make "No Genre" as the key
Map<String, Integer> byGenreSummingPages = books.stream().collect(Collectors.groupingBy(b -> b.getGenre() != null ? b.getGenre() : "No Genre", Collectors.summingInt(Book::getNumberOfPages)));
7-1=Partition by number of pages into Map<Boolean, List<Book>>. True if number of pages is greater then 300
7-2=Partition by price into Map<Boolean, List<Book>>. True if price is greater then 10.00
Map<Boolean, List<Book>> partitionedByNumberOfPages = books.stream().collect(Collectors.partitioningBy(e -> 300 > e.getNumberOfPages()));
